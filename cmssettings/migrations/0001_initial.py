# Generated by Django 5.0 on 2023-12-31 10:57

import django.db.models.deletion
import wagtail.blocks
import wagtail.fields
import wagtailutils.blocks
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
        ("wagtailimages", "0025_alter_image_file_alter_rendition_file"),
        ("wagtailmenus", "0023_remove_use_specific"),
    ]

    operations = [
        migrations.CreateModel(
            name="FooterSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "menu_title_1",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Menu Title 1",
                    ),
                ),
                (
                    "menu_title_2",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Menu Title 2",
                    ),
                ),
                (
                    "social_links_title",
                    models.CharField(
                        blank=True,
                        default="Socials",
                        max_length=200,
                        null=True,
                        verbose_name="Social Links Title",
                    ),
                ),
                (
                    "facebook",
                    models.URLField(
                        blank=True, max_length=255, verbose_name="Facebook"
                    ),
                ),
                (
                    "linked_in",
                    models.URLField(
                        blank=True, max_length=255, verbose_name="LinkedIn"
                    ),
                ),
                (
                    "youtube",
                    models.URLField(blank=True, max_length=255, verbose_name="Youtube"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=255, verbose_name="Email"),
                ),
                (
                    "logos_title",
                    models.CharField(
                        blank=True,
                        default="Logos Title",
                        max_length=200,
                        null=True,
                        verbose_name="Logos Title",
                    ),
                ),
                (
                    "logos",
                    wagtail.fields.StreamField(
                        [
                            (
                                "logo",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtailutils.blocks.ImageChooserBlock(
                                                help_text="Optimal Dimension: width-202px",
                                                rendition_rules={
                                                    "mobile": "width-133|format-webp",
                                                    "mobile_fallback": "width-133",
                                                    "original": "width-202|format-webp",
                                                    "original_fallback": "width-202",
                                                    "tab": "width-202|format-webp",
                                                    "tab_fallback": "width-202",
                                                },
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "cta",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "link",
                                                        wagtail.blocks.StreamBlock(
                                                            [
                                                                (
                                                                    "page",
                                                                    wagtailutils.blocks.PageChooserBlock(
                                                                        max_num=1
                                                                    ),
                                                                ),
                                                                (
                                                                    "link",
                                                                    wagtail.blocks.URLBlock(
                                                                        max_num=1
                                                                    ),
                                                                ),
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "anchor",
                                                        wagtail.blocks.CharBlock(
                                                            required=False
                                                        ),
                                                    ),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ],
                        blank=True,
                        null=True,
                        use_json_field=True,
                    ),
                ),
                (
                    "copyright_line",
                    models.CharField(
                        blank=True,
                        default="Copyright Â© 2022 SAJIDA. All right reserved.",
                        max_length=255,
                        verbose_name="copyright",
                    ),
                ),
                (
                    "menu_column_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailmenus.flatmenu",
                        verbose_name="Menu Column 1",
                    ),
                ),
                (
                    "menu_column_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailmenus.flatmenu",
                        verbose_name="Menu Column 2",
                    ),
                ),
                (
                    "menu_row",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailmenus.flatmenu",
                        verbose_name="Menu row",
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Footer Settings",
            },
        ),
        migrations.CreateModel(
            name="GlobalSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "google_map_key",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="Google Map API Key",
                    ),
                ),
                (
                    "google_analytic_tag",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Google Tag for Analytic",
                    ),
                ),
                (
                    "opengraph_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="wagtailimages.image",
                        verbose_name="OpenGraph Image",
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Global Settings",
            },
        ),
    ]
